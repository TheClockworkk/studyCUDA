#ifndef __CUDACC__ 
#define __CUDACC__
#endif

#include <stdio.h>
#include <stdlib.h>
#include <cuda.h>
#include <curand_kernel.h>
#include <curand.h>
#include <device_functions.h>
#include <windows.h>
#include <time.h>

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#define BLOCK_SIZE 16

#define N 1024
//#define N 256
//#define N 128
//#define N 64
//#define N 32
//#define N 16
//#define N 8
//#define N 4
//#define N 2

__global__ void matix_multiplication(float* a, float* b, int n, float* c)
{
	int blockX = blockIdx.x;
	int blockY = blockIdx.y;
	int threadX = threadIdx.x;
	int threadY = threadIdx.y;
	int aMatrixBegin = n * BLOCK_SIZE * blockY;
	int aEnd = aMatrixBegin + n - 1;
	int aStep = BLOCK_SIZE;
	int bBegin = BLOCK_SIZE * blockX;
	int bStep = BLOCK_SIZE * n;
	float sum = 0.0f;
	for (int ia = aMatrixBegin, ib = bBegin; ia <= aEnd; ia += aStep, ib += bStep)
	{
		__shared__ float as[BLOCK_SIZE][BLOCK_SIZE];
		__shared__ float bs[BLOCK_SIZE][BLOCK_SIZE];

		as[threadY][threadX] = a[ia + n * threadY + threadX];
		bs[threadY][threadX] = b[ib + n * threadY + threadX];
		__syncthreads();

		for (int k = 0; k < BLOCK_SIZE; k++)
			sum += as[threadY][k] * bs[k][threadX];
		__syncthreads();
	}
	int ic = n * BLOCK_SIZE * blockY + BLOCK_SIZE * blockX;
	c[ic + n * threadY + threadX] = sum;
}

int main(int argc, char* argv[])
{
	int matrixSize = N * N * sizeof(float);
	int count = 0;

	// allocate host memory

	float* matrixA = new float[N * N];
	float* matrixB = new float[N * N];
	float* matrixRes = new float[N * N];

	//float matrixA[N * N] = {4.0f, 6.0f, 3.0f, 2.0f};
	//float matrixB[N * N] = {7.0f, 1.0f, 5.0f, 8.0f };

	for (int i = 0; i < N * N; i++)
	{
		matrixA[i] = 1.0f;
		matrixB[i] = 2.0f;
	}

	/*for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
		{
			matrixA[i] = 2.0f;
			matrixB[i] = 1.0f;
		}*/

	/*printf("Matrix A:\n");
	for (int i = 0; i < N * N; i++)
	{
		if (count != N) {
			printf("%f ", matrixA[i]);
			count++;
		}
		else {
			printf("\n%f ", matrixA[i]);
			count = 1;
		}

	}
	count = 0;*/

	// allocate device memory

	float* devMatrixA, * devMatrixB, * devMatrixRes;

	cudaMalloc((void**)&devMatrixA, matrixSize);
	cudaMemset(devMatrixA, 0, matrixSize * sizeof(float));

	cudaMalloc((void**)&devMatrixB, matrixSize);
	cudaMemset(devMatrixB, 0, matrixSize * sizeof(float));

	cudaMalloc((void**)&devMatrixRes, matrixSize);
	cudaMemset(devMatrixRes, 0, matrixSize * sizeof(float));

	// kernel launch settings

	dim3 threads(BLOCK_SIZE, BLOCK_SIZE);
	dim3 blocks(N / threads.x, N / threads.y);

	// host data -> device data

	cudaMemcpy(devMatrixA, matrixA, matrixSize, cudaMemcpyHostToDevice);
	cudaMemcpy(devMatrixB, matrixB, matrixSize, cudaMemcpyHostToDevice);

	matix_multiplication <<< blocks, threads >>> (devMatrixA, devMatrixB, N, devMatrixRes);

	printf("\nMatrix A:\n");
	for (int i = 0; i < N * N; i++)
	{
		if (count != N) {
			printf("%f ", matrixA[i]);
			count++;
		}
		else {
			printf("\n%f ", matrixA[i]);
			count = 1;
		}

	}
	count = 0;

	printf("\n\nMatrix B:\n");
	for (int i = 0; i < N * N; i++)
	{
		if (count != N) {
			printf("%f ", matrixB[i]);
			count++;
		}
		else {
			printf("\n%f ", matrixB[i]);
			count = 1;
		}

	}
	count = 0;

	cudaMemcpy(matrixRes, devMatrixRes, matrixSize, cudaMemcpyDeviceToHost);
	printf("\n\nMatrix multiplication result:\n");
	for (int i = 0; i < N*N; i++)
	{
		if (count != N) {
			printf("%f ", matrixRes[i]);
			count++;
		}
		else {
			printf("\n%f ", matrixRes[i]);
			count = 1;
		}
		
	}
	count = 0;

	cudaFree(devMatrixA);
	cudaFree(devMatrixB);
	cudaFree(devMatrixRes);
	free(matrixA);
	free(matrixB);
	free(matrixRes);

	return EXIT_SUCCESS;
}
