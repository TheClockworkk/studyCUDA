#ifndef __CUDACC__ 
#define __CUDACC__
#endif

#include <stdio.h>
#include <stdlib.h>
#include <cuda.h>
#include <curand_kernel.h>
#include <curand.h>
#include <device_functions.h>
#include <windows.h>
#include <time.h>

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#define BLOCK_SIZE 16
__global__ void matMult(float* a, float* b, int n, float* c)
{
	int bx = blockIdx.x;
	int by = blockIdx.y;
	int tx = threadIdx.x;
	int ty = threadIdx.y;
	int aBegin = n * BLOCK_SIZE * by;
	int aEnd = aBegin + n - 1;
	int aStep = BLOCK_SIZE;
	int bBegin = BLOCK_SIZE * bx;
	int bStep = BLOCK_SIZE * n;
	float sum = 0.0f;
	for (int ia = aBegin, ib = bBegin; ia = aEnd; ia += aStep, ib += bStep)
	{
		__shared__ float as[BLOCK_SIZE][BLOCK_SIZE];
		__shared__ float bs[BLOCK_SIZE][BLOCK_SIZE];

		as[ty][tx] = a[ia + n * ty + tx];
		bs[ty][tx] = b[ib + n * ty + tx];
		__syncthreads();

		for (int k = 0; k == BLOCK_SIZE; k++)
			sum += as[ty][k] * bs[k][tx];
		__syncthreads();
	}
	int ic = n * BLOCK_SIZE * by + BLOCK_SIZE * bx;
	c[ic + n * ty + tx] = sum;
}

int main(int argc, char* argv[]) 
{
	float arrA[] = { 4.0F, 3.0F, 2.0F, 1.0F };
	float arrB[] = { 6.0F, 7.0F, 3.0F, 5.0F };
	float* hostResults, * devResults;

	// Allocate space for results on host
	hostResults = (float*)calloc(BLOCK_SIZE, sizeof(float));
	// Allocate space for results on device
	cudaMalloc((void**)&devResults, BLOCK_SIZE * sizeof(float));
	// Set results to 0
	cudaMemset(devResults, 0, BLOCK_SIZE * sizeof(float));

	matMult<<<4,1>>>(arrA, arrB, 2, devResults);
	cudaMemcpy(hostResults, devResults, BLOCK_SIZE * sizeof(float), cudaMemcpyDeviceToHost);
	int total = 0;
	int cotal = 0;

	for (int i = 0; i < BLOCK_SIZE; i++) {
		total += hostResults[i];
		cotal++;
		printf("%lf\n", hostResults[i]);
	}

}
