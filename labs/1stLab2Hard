#define BLOCK_SIZE 16 // ê‡ÁÏÂ ·ÎÓÍ‡.
__global__ void matMult ( float * a, float * b, int n, float * c )
{
	int bx = blockIdx.x;
	int by = blockIdx.y;
	int tx = threadIdx.x;
	int ty = threadIdx.y;
	int aBegin = n * BLOCK_SIZE * by;
	int aEnd = aBegin + n – 1;
	int aStep = BLOCK_SIZE;
	int bBegin = BLOCK_SIZE * bx;
	int bStep = BLOCK_SIZE * n;
	float sum = 0.0f;
	for ( int ia = aBegin, ib = bBegin; ia &lt;= aEnd; ia += aStep, ib += bStep )
	{
		__shared__ float as [BLOCK_SIZE][BLOCK_SIZE];
		__shared__ float bs [BLOCK_SIZE][BLOCK_SIZE];
		
		as [ty][tx] = a [ia + n * ty + tx];
		bs [ty][tx] = b [ib + n * ty + tx];
		__syncthreads();
		
		for ( int k = 0; k &lt; BLOCK_SIZE; k++ )
			sum += as [ty][k] * bs [k][tx];
		__syncthreads();
	}
	int ic = n * BLOCK_SIZE * by + BLOCK_SIZE * bx;
	c [ic + n * ty + tx] = sum;
}
