#ifndef __CUDACC__ 
#define __CUDACC__
#endif

#include <stdio.h>
#include <stdlib.h>
#include <cuda.h>
#include <curand_kernel.h>
#include <curand.h>
#include <device_functions.h>
#include <time.h>

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

//#define SIZE 1024
//#define SIZE 256
//#define SIZE 128
//#define SIZE 64
//#define SIZE 32
//#define SIZE 16
#define SIZE 8
//#define SIZE 4
//#define SIZE 2

#define BLOCK_SIZE 256 
#define LOG_NUM_BANKS 4 
#define CONFLICT_FREE_OFFS(i) ((i) >> LOG_NUM_BANKS)

__global__ void setup_kernel(curandState* state)
{
	int id = threadIdx.x + blockIdx.x * SIZE;
	// Each thread gets same seed, a different sequence
	// Number, no offset, we can got new pseudo-numbers sequence if we will change seed parameter 
	curand_init(0, id, 0, &state[id]);
}

__global__ void generate_kernel(curandState* state, int* result)
{
	int id = threadIdx.x + blockIdx.x * SIZE;
	int count = 0;
	unsigned int x;
	// Copy state to local memory for efficiency
	curandState localState = state[id];
	// Generate pseudo-random unsigned ints based on n. n - measure of digits pow
	for (int n = 0; n < 1; n++) {
		x = curand(&localState);
		// Check if low bit set
		if (x & 1) { count++; }
	}
	// Copy state back to global memory 
	state[id] = localState;
	// Store results 
	result[id] += count;
}

__global__ void scan(int* inData, int* outData)
{
	__shared__ float temp[2 * BLOCK_SIZE + CONFLICT_FREE_OFFS(2 * BLOCK_SIZE)];
	int tid = threadIdx.x;
	int offset = 1;
	int ai = tid;
	int bi = tid + (SIZE * SIZE / 2);
	int offsA = CONFLICT_FREE_OFFS(ai);
	int offsB = CONFLICT_FREE_OFFS(bi);
	temp[ai + offsA] = inData[ai]; 
	temp[bi + offsB] = inData[bi];
	
	for (int d = SIZE * SIZE >> 1; d > 0; d >>= 1)
	{
		__syncthreads();
		if (tid < d)
		{
			int ai = offset * (2 * tid + 1) - 1;
			int bi = offset * (2 * tid + 2) - 1;
			ai += CONFLICT_FREE_OFFS(ai);
			bi += CONFLICT_FREE_OFFS(bi);
				temp[bi] += temp[ai];
		}
	}
	offset <<= 1;

	if (tid == 0) 
	temp[SIZE * SIZE - 1 + CONFLICT_FREE_OFFS(SIZE * SIZE - 1)] = 0;
	for (int d = 1; d < SIZE * SIZE; d <<= 1)
	{
		offset >>= 1;
		__syncthreads();
		if (tid < d)
		{
			int ai = offset * (2 * tid + 1) - 1;
			int bi = offset * (2 * tid + 2) - 1;
			float t;
			ai += CONFLICT_FREE_OFFS(ai);
			bi += CONFLICT_FREE_OFFS(bi);
			t += temp[ai];
			temp[ai] += temp[bi];
			temp[bi] += t;
		}
	}
	__syncthreads();
	outData[ai] = temp[ai + offsA];
	outData[bi] = temp[bi + offsB];
}

int main(int argc, char* argv[])
{
	// Pseudo-random variables
	int i;
	curandState* devStates;
	int* devResults, * hostResults;

	// Allocate space for results on host
	hostResults = (int*)calloc(SIZE * SIZE, sizeof(int));
	// Allocate space for results on device
	cudaMalloc((void**)&devResults, SIZE * SIZE * sizeof(int));
	// Set results to 0
	cudaMemset(devResults, 0, SIZE * SIZE * sizeof(int));
	// Allocate space for prng states on device
	cudaMalloc((void**)&devStates, SIZE * SIZE * sizeof(curandState));

	//Setup prng states
	setup_kernel <<< SIZE, SIZE >>> (devStates);
	// Generate and use pseudo-random. i from 0 to 9 means we will generate 0 - 9 numbers 
	for (i = 0; i < 9; i++) {
		generate_kernel <<< SIZE, SIZE >>> (devStates, devResults);
	}// Copy device memory to host
	cudaDeviceSynchronize();
	cudaMemcpy(hostResults, devResults, SIZE * SIZE * sizeof(int), cudaMemcpyDeviceToHost);
	// Show result - always fixed, based on seed from setup_kernel


	printf("Generated array:");
	int total = 0;
	for (i = 0; i < SIZE * SIZE; i++) {
		total += hostResults[i];
		printf("%d ", hostResults[i]);
	}

	printf("\n\n");

	int* hostResultsForScan, * devResultsForScan;

	// Allocate space for results on host
	hostResultsForScan = (int*)calloc(SIZE * SIZE, sizeof(int));

	// memory allocation for scan func
	cudaMalloc((void**)&devResultsForScan, SIZE * SIZE * sizeof(int));
	cudaMemset(devResultsForScan, 0, SIZE * SIZE * sizeof(int));

	scan <<< 16, 16 >>> (devResults, devResultsForScan);
	cudaDeviceSynchronize();

	cudaMemcpy(devResultsForScan, hostResultsForScan, SIZE * SIZE * sizeof(int), cudaMemcpyDeviceToHost);
	total = 0;

	printf("\nScan results:\n");

	for (i = 0; i < SIZE * SIZE; i++) {
		total += hostResultsForScan[i];
		printf("%d ", hostResultsForScan[i]);
	}
	printf("\nScan sum: %d\n", total);

	cudaFree(devStates);
	cudaFree(devResults);
	cudaFree(devResultsForScan);
	free(hostResults);
	free(hostResultsForScan);
	return EXIT_SUCCESS;
}
