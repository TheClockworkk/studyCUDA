#ifndef __CUDACC__ 
#define __CUDACC__
#endif

#include <stdio.h>
#include <stdlib.h>
#include <cuda.h>
#include <curand_kernel.h>
#include <curand.h>
#include <device_functions.h>

#define SIZE 256

__global__ void setup_kernel(curandStateMRG32k3a* state)
{
	int id = threadIdx.x + blockIdx.x * blockDim.x;
	// Each thread gets same seed, a different sequence
	// Number, no offset, we can got new pseudo-numbers sequence if we will change seed parameter 
	curand_init(0, id, 0, &state[id]);
}

__global__ void generate_kernel(curandStateMRG32k3a* state, unsigned int* result)
{
	int id = threadIdx.x + blockIdx.x * blockDim.x;
	unsigned int count = 0;
	double x;
	/* Copy state to local memory for efficiency */
	curandStateMRG32k3a localState = state[id];
	/* Generate pseudo-random uniforms */
	for (int i = 0; i < 1; i++) {
		x = curand_uniform_double(&localState);
		/* Check if > .5 */
		if (x > .5) {
			count++;
		}
	}
	/* Copy state back to global memory */
	state[id] = localState;
	/* Store results */
	result[id] += count;
}

int main(int argc, char* argv[])
{
	// Pseudo-random variables
	curandStateMRG32k3a* devStates;
	unsigned int* devResults, * hostResults;

	// Allocate space for results on host
	hostResults = (unsigned int*)calloc(SIZE * SIZE, sizeof(int));
	// Allocate space for results on device
	cudaMalloc((void**)&devResults, SIZE * SIZE * sizeof(unsigned int));
	// Set results to 0
	cudaMemset(devResults, 0, SIZE * SIZE * sizeof(unsigned int));
	// Allocate space for prng states on device
	cudaMalloc((void**)&devStates, SIZE * SIZE * sizeof(curandStateMRG32k3a));

	//Setup prng states
	setup_kernel <<< SIZE, SIZE >>> (devStates);
	// Generate and use pseudo-random
	for (int i = 0; i < 9; i++) {
		generate_kernel <<< SIZE, SIZE >>> (devStates, devResults);
	}// Copy device memory to host
	
	cudaMemcpy(hostResults, devResults, SIZE * SIZE * sizeof(unsigned int), cudaMemcpyDeviceToHost);
	// Show result - always fixed, based on seed from setup_kernel

	//printf("Generated array:\n");
	unsigned int total = 0;
	unsigned int count = 0;
	for (int i = 0; i < SIZE * SIZE; i++) {
		total += hostResults[i];
		printf("%d ", hostResults[i]);
		count++;
	}
	//printf("\nElements count %d\n", count);

	return EXIT_SUCCESS;
}
