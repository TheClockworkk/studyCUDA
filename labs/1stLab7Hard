#ifndef __CUDACC__ 
#define __CUDACC__
#endif

#include <stdio.h>
#include <stdlib.h>
#include <cuda.h>
#include <curand_kernel.h>
#include <curand.h>
#include <device_functions.h>
#include <windows.h>
#include <time.h>

#include "cuda_runtime.h"
#include "device_launch_parameters.h"


//#define SIZE 1024
//#define SIZE 256
//#define SIZE 128
//#define SIZE 64
//#define SIZE 32
//#define SIZE 16
//#define SIZE 8
#define SIZE 4
//#define SIZE 2
#define BLOCK_SIZE 256


__global__ void setup_kernel(curandState * state)
{
	int id = threadIdx.x + blockIdx.x * SIZE;
	// Each thread gets same seed, a different sequence
	// Number, no offset, we can got new pseudo-numbers sequence if we will change seed parameter 
	curand_init(0, id, 0, &state[id]);
}

__global__ void generate_kernel(curandState* state, int* result)
{
	int id = threadIdx.x + blockIdx.x * SIZE;
	int count = 0;
	unsigned int x;
	// Copy state to local memory for efficiency
	curandState localState = state[id];
	// Generate pseudo-random unsigned ints based on n. n - measure of digits pow
	for (int n = 0; n < 1; n++) {
		x = curand(&localState);
		// Check if low bit set
		if (x & 1) { count++; }
	}
	// Copy state back to global memory 
	state[id] = localState;
	// Store results 
	result[id] += count;
}

__global__ void histogramm(int* inData, int* outData)
{
	__shared__ int temp[SIZE * SIZE];
	temp[threadIdx.x] = 0;
	__syncthreads();

	int id = threadIdx.x + blockIdx.x * blockDim.x;
	int offset = blockDim.x * gridDim.x;

	while (id < SIZE * SIZE)
	{
		atomicAdd (&temp[inData[id]], 1);
		id += offset;
	}

	__syncthreads();
	atomicAdd(&(outData[threadIdx.x]), temp[threadIdx.x]);
}


int main(int argc, char* argv[])
{
	// Pseudo-random variables
	int i, total, cotal;
	curandState* devStates;
	int* devResults, * hostResults;

	// variables for histogramm

	int* dev_buffer;//histogramm function insertion
	int* dev_histo;//histogram function output
	
	// Allocate space for results on host
	hostResults = (int*)calloc(SIZE * SIZE, sizeof(int));
	// Allocate space for results on device
	cudaMalloc((void**)&devResults, SIZE * SIZE * sizeof(int));
	// Set results to 0
	cudaMemset(devResults, 0, SIZE * SIZE * sizeof(int));
	// Allocate space for prng states on device
	cudaMalloc((void**)&devStates, SIZE * SIZE * sizeof(curandState));

	//Setup prng states
	setup_kernel <<< SIZE, SIZE >>> (devStates);
	// Generate and use pseudo-random. i from 0 to 9 means we will generate 0 - 9 numbers 
	for (i = 0; i < 9; i++) {
		generate_kernel <<< SIZE, SIZE >>> (devStates, devResults);
	}// Copy device memory to host
	cudaDeviceSynchronize();
	cudaMemcpy(hostResults, devResults, SIZE * SIZE * sizeof(int), cudaMemcpyDeviceToHost);
	// Show result - always fixed, based on seed from setup_kernel
	total = 0;
	cotal = 0;
	for (i = 0; i < SIZE * SIZE; i++) {
		total += hostResults[i];
		cotal++;
		printf("%d\n", hostResults[i]);
	}
	//printf("%boooooooooooooooooooooooooooooooooooooooooooooooooooooooba\n");'

	cudaMalloc((void**)&dev_histo, SIZE * SIZE * sizeof(int));
	cudaMemset(dev_histo, 0, SIZE * SIZE * sizeof(int));
	// Allocate space for results on device
	cudaMalloc((void**)&dev_buffer, SIZE * SIZE * sizeof(int));
	// Set results to 0
	cudaMemset(dev_buffer, 0, SIZE * SIZE * sizeof(int));
	// Allocate space for prng states on device

	cudaMemcpy(hostResults, dev_buffer, SIZE * SIZE * sizeof(int), cudaMemcpyHostToDevice);

	//place for histogramm calculation

	histogramm <<<SIZE * SIZE, SIZE*SIZE >>> (dev_buffer, dev_histo);

	int histo[SIZE * SIZE];
	cudaMemcpy(histo, dev_histo, SIZE * SIZE * sizeof(int), cudaMemcpyDeviceToHost);
	
	for (int i = 0; i < SIZE * SIZE; i++)
	{
		histo[hostResults[i]]--;
	}

	int histoCount = 0;
	for (int i = 0; i < SIZE * SIZE; i++) 
	{
		if (histo[i] != 0 && (abs(histo[i]) < SIZE * SIZE))
		{
			printf("Exist column with digit %d, count of elements - %d \n", i, abs(histo[i]));
			histoCount += abs(histo[i]);
		}
	}

	printf("Histogramm count of elements: %ld\n", histoCount);

	cudaFree(devStates);
	cudaFree(devResults);
	cudaFree(dev_buffer);
	cudaFree(dev_histo);
	free(hostResults);
	return EXIT_SUCCESS;
}
