#ifndef __CUDACC__ 
#define __CUDACC__
#endif

#include <stdio.h>
#include <stdlib.h>
#include <cuda.h>
#include <curand_kernel.h>
#include <curand.h>
#include <device_functions.h>
#include <time.h>

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#define SIZE 1024
//#define SIZE 256
//#define SIZE 128
//#define SIZE 64
//#define SIZE 32
//#define SIZE 16
//#define SIZE 8
//#define SIZE 4
//#define SIZE 2

__global__ void setup_kernel(curandState* state)
{
	int id = threadIdx.x + blockIdx.x * SIZE;
	// Each thread gets same seed, a different sequence
	// Number, no offset, we can got new pseudo-numbers sequence if we will change seed parameter 
	curand_init(0, id, 0, &state[id]);
}

__global__ void generate_kernel(curandState* state, int* result)
{
	int id = threadIdx.x + blockIdx.x * SIZE;
	int count = 0;
	unsigned int x;
	// Copy state to local memory for efficiency
	curandState localState = state[id];
	// Generate pseudo-random unsigned ints based on n. n - measure of digits pow
	for (int n = 0; n < 1; n++) {
		x = curand(&localState);
		// Check if low bit set
		if (x & 1) { count++; }
	}
	// Copy state back to global memory 
	state[id] = localState;
	// Store results 
	result[id] += count;
}

__global__ void elements_count_sum(int* arr, int* elementsCount, int* elementsSum)
{
	int idx = threadIdx.x + blockIdx.x * blockDim.x;
	int offset = blockDim.x * gridDim.x;

	for (int n = idx; n < SIZE * SIZE; n += offset)
	{
		atomicAdd(&elementsCount[0], 1);
		atomicAdd(&elementsSum[0], arr[n]);
	}
}

__global__ void sum_squares_minus_middle(int* arr, float* result, float middleAriphmetic)
{
	int idx = threadIdx.x + blockIdx.x * blockDim.x;
	int offset = blockDim.x * gridDim.x;
	float old, new_old;

	for (int n = idx; n < SIZE * SIZE; n += offset) {
		old = pow(arr[n] - middleAriphmetic, 2);
		do
		{
			new_old = atomicExch(&result[0], 0.0f);
			new_old += old;
		}
		while ((old = atomicExch(&result[0], new_old)) != 0.0f);
	}
}


int main(int argc, char* argv[])
{
	// Pseudo-random variables
	int i, sumTotal, countTotal;
	curandState *devStates;
	int *devResults, *hostResults;

	// Allocate space for results on host
	hostResults = (int*)calloc(SIZE * SIZE, sizeof(int));
	// Allocate space for results on device
	cudaMalloc((void**)&devResults, SIZE * SIZE * sizeof(int));
	// Set results to 0
	cudaMemset(devResults, 0, SIZE * SIZE * sizeof(int));
	// Allocate space for prng states on device
	cudaMalloc((void**)&devStates, SIZE * SIZE * sizeof(curandState));

	//Setup prng states
	setup_kernel <<< SIZE, SIZE >>> (devStates);
	// Generate and use pseudo-random. i from 0 to 9 means we will generate 0 - 9 numbers 
	for (i = 0; i < 9; i++) {
		generate_kernel <<< SIZE, SIZE >>> (devStates, devResults);
	}// Copy device memory to host
	cudaDeviceSynchronize();
	cudaMemcpy(hostResults, devResults, SIZE * SIZE * sizeof(int), cudaMemcpyDeviceToHost);
	// Show result - always fixed, based on seed from setup_kernel

	//CPU
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	sumTotal = 0;
	countTotal = 0;
	for (i = 0; i < SIZE * SIZE; i++) {
		sumTotal += hostResults[i];
		countTotal++;
	}

	float midAriphmetic = 0;
	
	midAriphmetic = sumTotal / countTotal;
	printf("\nCPU mid = %f\n", midAriphmetic);

	float sqSum = 0;
	for (int i = 0; i < SIZE * SIZE; i++)
		sqSum += pow(hostResults[i] - midAriphmetic, 2);
	printf("CPU sqSum = %f\n", sqSum);

	float answ = 0;

	answ = sqrt(sqSum / float(SIZE * SIZE));
	printf("CPU standart deviation = %f\n", answ);
	// CPU END

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("CPU time %f ms\n", cpu_time_used * float(1000));


	//GPU memory alocation and variatives
	int* elementsCountDev, * elementsCountHost, * elementsSumHost, * elementsSumDev;
	float *SqSumHost, *SqSumDev, middleAriphmetic = 0;

	// count
	elementsCountHost = (int*)calloc(1, sizeof(int));
	// Allocate space for results on device
	cudaMalloc((void**)&elementsCountDev, 1 * sizeof(int));
	// Set results to 0
	cudaMemset(elementsCountDev, 0, 1 * sizeof(int));

	// sum
	elementsSumHost = (int*)calloc(1, sizeof(int));
	// Allocate space for results on device
	cudaMalloc((void**)&elementsSumDev, 1 * sizeof(int));
	// Set results to 0
	cudaMemset(elementsSumDev, 0, 1 * sizeof(int));


	cudaEvent_t startC, stopC;
	float timeC;
	cudaEventCreate(&startC);
	cudaEventCreate(&stopC);
	cudaEventRecord(startC, 0);

	elements_count_sum <<< 32, 256 >>> (devResults, elementsCountDev, elementsSumDev);
	cudaDeviceSynchronize();

	cudaMemcpy(elementsCountHost, elementsCountDev, sizeof(int), cudaMemcpyDeviceToHost);
	cudaMemcpy(elementsSumHost, elementsSumDev, sizeof(int), cudaMemcpyDeviceToHost);
	middleAriphmetic = elementsSumHost[0] / elementsCountHost[0];

	// sum
	SqSumHost = (float*)calloc(1, sizeof(float));
	// Allocate space for results on device
	cudaMalloc((void**)&SqSumDev, 1 * sizeof(float));
	// Set results to 0
	cudaMemset(SqSumDev, 0, 1 * sizeof(float));

	sum_squares_minus_middle <<< 32, 256 >>> (devResults, SqSumDev, middleAriphmetic);
	cudaDeviceSynchronize();

	cudaMemcpy(SqSumHost, SqSumDev, sizeof(float), cudaMemcpyDeviceToHost);
	float answerGpu;
	answerGpu = sqrt(SqSumHost[0] / elementsCountHost[0]);

	cudaEventRecord(stopC, 0);
	cudaEventSynchronize(stopC);
	cudaEventElapsedTime(&timeC, startC, stopC);
	printf("GPU mid %f\n", middleAriphmetic);
	printf("GPU sqSum %f\n", SqSumHost[0]);
	printf("GPU standart deviation = %f\n", answerGpu);
	printf("GPU time = %f ms\n", timeC);

	cudaEventDestroy(stopC);
	cudaEventDestroy(startC);
	

	cudaFree(devStates);
	cudaFree(elementsCountDev);
	cudaFree(elementsSumDev);
	cudaFree(SqSumDev);
	cudaFree(devResults);
	free(SqSumHost);
	free(elementsCountHost);
	free(elementsSumHost);
	free(hostResults);
	return EXIT_SUCCESS;

}
